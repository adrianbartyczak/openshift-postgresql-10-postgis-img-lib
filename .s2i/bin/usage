#!/bin/bash -e
# 
# File:
#   usage
# 
# Description:
#   A message describing the usage of the S2I build for image
#   adrianbartyczak/openshift-postgresql-10-postgis.
# 

cat <<EOF
This is a PostgreSQL 10 extended with PostGIS image for OpenShift Origin.

It can be found at
https://hub.docker.com/r/adrianbartyczak/openshift-postgresql-10-postgis/.

Its packaging library can be found at
https://github.com/adrianbartyczak/openshift-postgresql-10-postgis-img-lib.

Build:
  To build the image, change to the directory of the packaging library of this
  image and run the following command:

      docker build --build-arg OPENSHIFT_ORIGIN_USER_ID=<id> -t \
            <image_name>:<image_tag> .

          Note: To get the correct OpenShift Origin user ID, follow the
                instructions provided in the README.md of the packaging library
                repository. If the image will be run as a plain Docker
                container, this build argument can be excluded.

Run as a non-OpenShift application:
  After the image is built, it can be run as a plain Docker container with the
  following command:

      docker run -t -d <image_name>:<image_tag> bash

          Note: As an S2I source files repository containing a "run" script to
                start the PostgreSQL server is not being used, the server must
                be started manually. To start it, run one of the following two
                commands inside the container:

                    1. /usr/pgsql-10/bin/pg_ctl -D /var/lib/postgres/data -l \
                             /var/lib/postgres/data/server.log start

                    2. /usr/pgsql-10/bin/postgres -D /var/lib/postgres/data \
                             >logfile 2>&1 &

Run as an OpenShift application:
  This section explains how to run the built image as an OpenShift application
  with the OpenShift S2I tool.

  To run the image as an OpenShift application with the OpenShift S2I tool, a
  S2I source files repository containing a "run" script that starts the
  PostgreSQL server must be created. Such a repository has been pre-created for
  this image and can be found at
  https://github.com/adrianbartyczak/openshift-postgresql-10-postgis-img-s2i. 

  An image can be run as an OpenShift application with the OpenShift S2I tool in
  one of two ways:

    1. Building a new image with an already built image and an S2I source files
       repository containing a "run" script that starts the main program with
       the OpenShift Source-To-Image tool (found at
       https://github.com/openshift/source-to-image) and running it as a plain
       Docker image.

    2. Creating a new application with an already built image and an S2I source
       files repository containing a "run" script that starts the main program
       on the OpenShift Origin server.

  To run the image as an OpenShift application with the OpenShift S2I tool as
  a plain Docker container, run the following two commands:

      1. s2i build \
               <s2i_source_files_repository_(can_be_the_pre-created_one_for_this_image)> \
               <docker_built_image_name>:<docker_built_image_tag> \
               <new_image_name>:<new_image_tag>

      2. docker run <new_image_name>:<new_image_tag>

             Note: When successful, the container will run in the current shell
                   and print the output of the PostgreSQL server.
             Note: To run the containerin the background, add option '-d'.

  To run the image as an OpenShift application with the OpenShift S2I tool on
  the OpenShift Origin server, run the following command:

      oc new-app \
            <docker_built_image_name>:<docker_built_image_tag>~\
  <s2i_source_files_repository_(can_be_the_pre-created_one_for_this_image)> \
            --name=<app_name>

          Note: If this application is being created on a remote OpenShift
                Origin server, the image must exist in a remote Docker registry.
                Additionally, if the image exists in a registry other than
                Docker Hub, the URL of the registry may have to be provided when
                specifying the image (e.g.
                registry.access.example.com/<user_or_org>/<image_name>)
EOF

